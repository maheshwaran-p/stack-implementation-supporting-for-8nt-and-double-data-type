/*
The concept of templates can be used in two different ways:

Function Templates
Class Templates
Function Templates
A function template works in a similar to a normal function, with one key difference.

A single function template can work with different data types at once but, a single normal function can only work with one set of data types.

Normally, if you need to perform identical operations on two or more types of data, you use function overloading to create two functions with the required function declaration.

}

template <class T>
T someFunction(T arg)
{
   ... .. ...
}
In the above code, T is a template argument that accepts different data types (int, float), and class is a keyword.

You can also use keyword typename instead of class in the above example.

When, an argument of a data type is passed to someFunction( ), compiler generates a new version of someFunction() for the given data type.

Example 1: Function Template to find the largest number
Program to display largest among two numbers using function templates.

*/

#include<iostream>
using namespace std;
#define MAX 5
 
//Declaration of Double Stack
class DStack
{
    private:
        int top1;
        int top2;
        int ele[MAX];
 
    public:
        DStack();
        void pushA(int  item);
        void pushB(int  item);
        int  popA (int *item); 
        int  popB (int *item);
 
}; 
 
//Initialization of Double Stack
DStack::DStack()
{
    top1 = -1;
    top2 = MAX;
}
 
//Push Operation on Stack1
void DStack::pushA( int item )
{
    if( top2 == top1 + 1 )
    {
        cout<<"\nStack Overflow Stack1";
        return;
    }
 
    top1++;
    ele[top1] = item;
 
    cout<<"\nInserted item in Stack1 : "<< item;    
}
 
//Push Operation on Stack2
void DStack::pushB( int item )
{
    if( top2 == top1 + 1 )
    {
        cout<<"\nStack Overflow Stack2";
        return;
    }
 
    top2--;
    ele[top2] = item;
 
    cout<<"\nInserted item in Stack2 : "<< item;    
}
 
//Pop Operation on Stack1
int DStack::popA( int *item )
{
    if( top1 == -1 )
    {
        cout<<"\nStack Underflow Stack1";
        return -1;
    }
 
    *item = ele[top1--];
    return 0;
}
 
//Pop Operation on Stack2
int DStack::popB( int *item )
{
    if( top2 == MAX )
    {
        cout<<"\nStack Underflow Stack2";
        return -1;
    }
 
    *item = ele[top2++];
    return 0;
}
 template <class T>
T Large(T n1, T n2)
{
	return (n1 > n2) ? n1 : n2;
}

 
int main()
{ 
    int item = 0;
 
    DStack s = DStack();
 
    
 
 
 	int i1, i2;
	float f1, f2;
	char c1, c2;
cout<<endl;
	cout << "Enter two integers:\n";
	cin >> i1 >> i2;
	cout << Large(i1, i2) <<" is larger." << endl;

	cout << "\nEnter two floating-point numbers:\n";
	cin >> f1 >> f2;
	cout << Large(f1, f2) <<" is larger." << endl;

	cout << "\nEnter two characters:\n";
	cin >> c1 >> c2;
	cout << Large(c1, c2) << " has larger ASCII value.";

 
    if( s.popA(&item) == 0 )
        cout<<"\nDeleted item From Stack1 : "<< item;
    if( s.popA(&item) == 0 )
        cout<<"\nDeleted item From Stack1 : "<< item;
    if( s.popA(&item) == 0 )
        cout<<"\nDeleted item From Stack1 : "<< item;
 
    if( s.popB(&item) == 0 )
        cout<<"\nDeleted item From Stack2 : "<< item;
    if( s.popB(&item) == 0 )
        cout<<"\nDeleted item From Stack2 : "<< item;
    if( s.popB(&item) == 0 )
    cout<<"\nDeleted item From Stack2 : "<< item;
 
    cout<< endl;
 
    return 0;
}
